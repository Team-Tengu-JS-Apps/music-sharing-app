{"version":3,"sources":["../../../public/scripts/templates.js"],"names":["templateLoader","templatesCache","get","templateName","Promise","resolve","reject","Handlebars","compile","$","template"],"mappings":";;;;;AAAA,IAAMA,iBAAkB,YAAM;AAC1B,QAAMC,iBAAiB,EAAvB;;AAEA,aAASC,GAAT,CAAaC,YAAb,EAA2B;AACvB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gBAAIL,eAAeE,YAAf,CAAJ,EAAkC;AAC9BE,wBAAQE,WAAWC,OAAX,CAAmBP,eAAeE,YAAf,CAAnB,CAAR;AACH;;AAEDM,cAAEP,GAAF,kBAAqBC,YAArB,kBAAgD,oBAAY;AACxDF,+BAAeE,YAAf,IAA+BO,QAA/B;AACAL,wBAAQE,WAAWC,OAAX,CAAmBE,QAAnB,CAAR;AACH,aAHD;AAIH,SATM,CAAP;AAUH;;AAED,WAAO,EAAER,QAAF,EAAP;AACH,CAjBsB,EAAvB;;QAmBSF,c,GAAAA,c","file":"templates.js","sourcesContent":["const templateLoader = (() => {\r\n    const templatesCache = {};\r\n\r\n    function get(templateName) {\r\n        return new Promise((resolve, reject) => {\r\n            if (templatesCache[templateName]) {\r\n                resolve(Handlebars.compile(templatesCache[templateName]));\r\n            }\r\n\r\n            $.get(`./templates/${templateName}.handlebars`, template => {\r\n                templatesCache[templateName] = template;\r\n                resolve(Handlebars.compile(template));\r\n            })\r\n        });\r\n    }\r\n\r\n    return { get };\r\n})();\r\n\r\nexport { templateLoader };"]}